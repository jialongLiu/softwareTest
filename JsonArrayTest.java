/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 28 02:37:10 GMT 2019
 */

package net.mooctest;

import org.junit.Test;

import net.mooctest.JsonObject.HashIndexTable;
import net.mooctest.JsonObject.Member;

import static org.junit.Assert.*;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.StringReader;

import javax.swing.text.html.HTMLDocument.Iterator;

public class JsonArrayTest {

  @Test(timeout = 4000)
  public void test()  throws Throwable  {
      JsonArray jsonArray = new JsonArray();
      
   // jsonArray类的测试
      JsonArray ja_null = new JsonArray();
      JsonArray ja_main_add = new JsonArray();
      JsonArray ja_main_set = new JsonArray();
      JsonArray ja_ja2 = new JsonArray(ja_main_add);
      JsonArray ja_ja = new JsonArray(ja_null);

      // 初始化jsonArray，使用add
      ja_main_add.add(1);
      ja_main_add.add((float) 1.0);
      ja_main_add.add((double) 1.1);
      ja_main_add.add(ja_null);
      ja_main_add.add(true);
      ja_main_add.add((long) 1);
      ja_main_add.add("dsfjdfh");

      // 初始化jsonArray，使用set
      ja_main_add.set(0, 1);
      ja_main_add.set(1, (float) 2);
      ja_main_add.set(2, (double) 2);
      ja_main_add.set(3, (long) 2);
      ja_main_add.set(4, true);
      ja_main_add.set(5, "(float)2");
      ja_main_add.set(6, ja_main_add);
      ja_main_set = ja_main_add;

      // 无返回值函数测试
      JsonArray ja_main_voidMethor = new JsonArray(ja_main_add);
      ja_main_voidMethor.remove(2);

      // 有返回值的函数测试
      JsonArray ja_main_methor = new JsonArray();
      JsonArray ja_test_unmodifiableArray = JsonArray.unmodifiableArray(ja_main_set);
      boolean ja_test_isempty = ja_main_set.isEmpty();
      int ja_test_size = ja_main_set.size();
      assertEquals(ja_test_isempty, false);
      JsonArray ja_test_asarray = ja_main_set.asArray();
      assertEquals(ja_main_set.isArray(), true);
      assertEquals(ja_main_set.equals(ja_main_add), true);
      JsonValue ja_test_get = ja_main_set.get(0);

      // json类的测试
      JsonObject jo = Json.object();
      JsonValue jv_test_value = Json.value("string");
      jv_test_value = Json.parse("{\"key1\":\"obj\",\"key2\":\"obj\"}");
      // BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      // jv_test_value = Json.parse(br);
      StringReader sr = new StringReader("{\"key1\":\"obj\",\"key2\":\"obj\"}");
      JsonValue jv_test_parse = Json.parse(sr);
      JsonValue jv_test_value2 = Json.value((long) 1);
      JsonValue jv_test_value3 = Json.value((float) 1);
      ja_null = Json.array((float) 2);
      JsonObject JO = new JsonObject();
      JsonObject jo2 = Json.object();
      jo2.readFrom("{\"key1\":\"obj\",\"key2\":\"obj\"}");
      JsonObject jo3 = new JsonObject(jo2);
      // jo2.write(new Writer());

      // jsonWriter类
      File file = new File("jsonwrite.txt");
      FileWriter fw = new FileWriter(file);
      JsonWriter jw_main = new JsonWriter(fw);
      fw.write("{\"paramz\":{\"feeds\":[{\"id\":299076,\"oid\":288340,\"category\":\"article\",\"data\":{\"subject\":\"荔枝新闻3.0：不止是阅读\",\"summary\":\"江苏广电旗下资讯类手机应用“荔枝新闻”于近期推出全新升级换代的3.0版。\",\"cover\":\"/Attachs/Article/288340/3e8e2c397c70469f8845fad73aa38165_padmini.JPG\",\"pic\":\"\",\"format\":\"txt\",\"changed\":\"2015-09-22 16:01:41\"}}],\"PageIndex\":1,\"PageSize\":20,\"TotalCount\":53521,\"TotalPage\":2677}}");
      fw.flush();
      FileReader fr = new FileReader(file);
      jo2.readFrom(fr);       
      jo2.write(jw_main);
      JsonValue jv_test_valueof = JsonValue.valueOf("string");// 返回“string”的jsonvalue值
      jv_test_valueof.writeTo(fw, WriterConfig.MINIMAL);
      fw.write("{\"key2\":\"obj\"}");
      fw.flush();
      jv_test_valueof.writeTo(fw, WriterConfig.MINIMAL);
      fw.write("{\"key2\":\"obj\"}");
      fw.flush();
      jv_test_valueof.writeTo(fw, WriterConfig.PRETTY_PRINT);

      try {
        jv_test_value = Json.parse("{\"kej\"}");// string不符合json格式，报错
      } catch (Exception e) {
        
      }
      jv_test_value = Json.parse("{\"paramz\":{\"feeds\":[{\"id\":299076,\"oid\":288340,\"category\":\"article\",\"data\":{\"subject\":\"荔枝新闻3.0：不止是阅读\",\"summary\":\"江苏广电旗下资讯类手机应用“荔枝新闻”于近期推出全新升级换代的3.0版。\",\"cover\":\"/Attachs/Article/288340/3e8e2c397c70469f8845fad73aa38165_padmini.JPG\",\"pic\":\"\",\"format\":\"txt\",\"changed\":\"2015-09-22 16:01:41\"}}],\"PageIndex\":1,\"PageSize\":20,\"TotalCount\":53521,\"TotalPage\":2677}}");


      //补全json类中array
      JsonValue jv_test_array_int = Json.array(1);
      JsonValue jv_test_array_long = Json.array((long)1);
      JsonValue jv_test_array_float = Json.array((float) 1);
      JsonValue jv_test_array_string = Json.array("sdfiusdf");
      JsonValue jv_test_array_double = Json.array((double)1);
      JsonValue jv_test_array_boolean = Json.array(true);

      // 报错类型
      String str = null;
      Double dou= null;
      Long lon = null;
      float flo = 0;
      int iint = 0;
      Boolean boo = null;
      try {
  		JsonValue jv_test_array_int_null = Json.array(iint);
  	} catch (NullPointerException e) {
  		// TODO 自动生成的 catch 块
  	}
      try {
  		JsonValue jv_test_array_long_null = Json.array(lon);
  	} catch (NullPointerException e) {
  		// TODO 自动生成的 catch 块
  	}
      try {
  		JsonValue jv_test_array_float_null = Json.array(flo);
  	} catch (NullPointerException e) {
  		// TODO 自动生成的 catch 块
  	}
      try {
  		JsonValue jv_test_array_string_null = Json.array(str);
  	} catch (NullPointerException e) {
  		// TODO 自动生成的 catch 块
  	}
      try {
  		JsonValue jv_test_array_double_null = Json.array(dou);
  	} catch (NullPointerException e) {
  		// TODO 自动生成的 catch 块
  	}
      try {
  		JsonValue jv_test_array_boolean_null = Json.array(boo);
  	} catch (NullPointerException e) {
  		// TODO 自动生成的 catch 块
    }
    
    // JsonObject剩余
    fw.write("{\"paramz\":{\"feeds\":[{\"id\":299076,\"oid\":288340,\"category\":\"article\",\"data\":{\"subject\":\"荔枝新闻3.0：不止是阅读\",\"summary\":\"江苏广电旗下资讯类手机应用“荔枝新闻”于近期推出全新升级换代的3.0版。\",\"cover\":\"/Attachs/Article/288340/3e8e2c397c70469f8845fad73aa38165_padmini.JPG\",\"pic\":\"\",\"format\":\"txt\",\"changed\":\"2015-09-22 16:01:41\"}}],\"PageIndex\":1,\"PageSize\":20,\"TotalCount\":53521,\"TotalPage\":2677}}");
    fw.flush();
    fr.read(new char[]{'a'});
    JsonObject jo_main= Json.object();
    

    // 给值
    String  str_real = "str";
    Double  dou_real= 1.0;
    Long lon_real = (long) 1;
    float flo_real = 1;
    int iint_real = 1;
    Boolean boo_real = true;
    jo_main.add("str_real", str_real);
    jo_main.add("dou_real", dou_real);
    jo_main.add("lon_real", lon_real);
    jo_main.add("flo_real", flo_real);
    jo_main.add("iint_real", iint_real);
    jo_main.add("boo_real", boo_real);

    jo_main.set("str_real", str_real);
    jo_main.set("dou_real", dou_real);
    jo_main.set("lon_real", lon_real);
    jo_main.set("flo_real", flo_real);
    jo_main.set("iint_real", iint_real);
    jo_main.set("boo_real", boo_real);
    jo_main.remove("boo_real");
    jo_main.contains("boo_real");
    jo_main.merge(jo2);
    jo_main.get("str_real");
    jo_main.getString("str_real","1");
    jo_main.getDouble("dou_real",1);
    jo_main.getLong("lon_real",1);
    jo_main.getFloat("flo_real",1);
    jo_main.getInt("iint_real",1);
    jo_main.getBoolean("boo_real",true);
    jo_main.size();
    jo_main.isEmpty();
    jo_main.names();
    jo_main.iterator();
    jo_main.write(jw_main);
    jo_main.equals(jo2);

    // jsonValue
    try {
  	jv_test_value.asArray();
  } catch (Exception e) {
  	// TODO 自动生成的 catch 块
  }
    try {
  	jv_test_value.asBoolean();
  } catch (Exception e) {
  	// TODO 自动生成的 catch 块
  }
    try {
  	jv_test_value.asDouble();
  } catch (Exception e) {
  	// TODO 自动生成的 catch 块
  }
    try {
  	jv_test_value.asFloat();
  } catch (Exception e) {
  	// TODO 自动生成的 catch 块
  }
    try {
  	jv_test_value.asInt();
  } catch (Exception e) {
  	// TODO 自动生成的 catch 块
  }
    try {
  	jv_test_value.asLong();
  } catch (Exception e) {
  	// TODO 自动生成的 catch 块
  }
    try {
  	jv_test_value.asObject();
  } catch (Exception e) {
  	// TODO 自动生成的 catch 块
  }
    try {
  	jv_test_value.asString();
  } catch (Exception e) {
  	// TODO 自动生成的 catch 块
  }
    jv_test_value.equals(jv_test_valueof);
    fw.write("{\"paramz\":{\"feeds\":[{\"id\":299076,\"oid\":288340,\"category\":\"article\",\"data\":{\"subject\":\"荔枝新闻3.0：不止是阅读\",\"summary\":\"江苏广电旗下资讯类手机应用“荔枝新闻”于近期推出全新升级换代的3.0版。\",\"cover\":\"/Attachs/Article/288340/3e8e2c397c70469f8845fad73aa38165_padmini.JPG\",\"pic\":\"\",\"format\":\"txt\",\"changed\":\"2015-09-22 16:01:41\"}}],\"PageIndex\":1,\"PageSize\":20,\"TotalCount\":53521,\"TotalPage\":2677}}");
    fw.flush();
    JsonWriter jw_main_prettyprint = new JsonWriter(fw);
    jo_main.write(jw_main_prettyprint);
    // ja_main_add.write(jw_main_prettyprint);
      
    // prettyprint
    char[] charArray = new char[] { '1', '2', '3', '4', '5', '6'};
    PrettyPrint pp_main = new PrettyPrint(charArray); 
    PrettyPrint pp_main_null = PrettyPrint.singleLine();
    try {
  	pp_main.indentWithSpaces(-1);
  } catch (Exception e) {
  	// TODO 自动生成的 catch 块
  }
    PrettyPrint pp_main_tab =  PrettyPrint.indentWithSpaces(4);
    PrettyPrint pp_main_n =  PrettyPrint.indentWithTabs();
    jw_main_prettyprint = pp_main.createWriter(fw);
    // PrettyPrintWriter.  
    JsonWriter ppw_main = pp_main.createWriter(fw);
    ppw_main.writeArrayOpen();
    ppw_main.writeArraySeparator();
    ppw_main.writeJsonString(str_real);
    ppw_main.writeJsonString("\n");
    ppw_main.writeJsonString("\\");
    ppw_main.writeJsonString("\u2027");
    ppw_main.writeJsonString("\u2028");
    ppw_main.writeJsonString("\u2029");
    ppw_main.writeJsonString("'\"'");
    ppw_main.writeJsonString("\r");
    ppw_main.writeJsonString("\t");

    // 转义：
    ppw_main.writeJsonString("\n");
    ppw_main.writeJsonString("\\");
    ppw_main.writeJsonString("\u2027");
    ppw_main.writeJsonString("\u2028");
    ppw_main.writeJsonString("\u2029");
    ppw_main.writeJsonString("'\"'");
    ppw_main.writeJsonString("\r");
    ppw_main.writeJsonString("\t");


    ppw_main.writeJsonString("0x000f");
    try {
  	ppw_main.writeJsonString(null);
  } catch (Exception e) {
  	// TODO 自动生成的 catch 块

  }
    ppw_main.writeJsonString("dsjfakljsdfkl;jadfgkljadslkfj6545462345/.,;;????////,..,m,mlk-=0=/*-+$%^&*(*&^%$#fssdf");
    ppw_main.writeLiteral(str_real);
    ppw_main.writeArrayClose();
    ppw_main.writeMemberName("str_real");
    ppw_main.writeMemberSeparator();
    ppw_main.writeObjectOpen();
    ppw_main.writeObjectSeparator();
    ppw_main.writeString(str_real);
    ppw_main.writeArraySeparator();
    ppw_main.writeObjectClose();
    ppw_main.writeArraySeparator();



    // jsonParser
    Json.DefaultHandler handler = new Json.DefaultHandler();
    JsonParser jp_main = new JsonParser(handler);
    JsonHandler<JsonArray, JsonObject> jh_main =  handler;



    // member
    JsonObject.Member m_main = new JsonObject.Member("namemeber",jv_test_value);
    JsonObject.Member m_main_test3 = new JsonObject.Member("namemeber2",jv_test_value3);
    m_main.equals(m_main_test3);
    m_main.getClass();
    m_main.getName();
    m_main.getValue();
    m_main.hashCode();
    jo_main.isObject();
    jo_main.add("name", jv_test_value);
    try {
  	jo_main.add(null, jv_test_value);
    } catch (Exception e) {
      // TODO 自动生成的 catch 块

    }
      JsonValue jv_test_null = null;
      try {
      jo_main.add("name", jv_test_null);
    } catch (Exception e) {
      // TODO 自动生成的 catch 块

    }
    JsonObject jo_main_null = null;
    jo_main.equals(jo_main_null);
    jo_main.equals(jo_main);


    // jsonliteral
    JsonLiteral jl_main = new JsonLiteral("test_jsonliteral");
    jl_main.write(jw_main_prettyprint);
    jl_main.toString();
    jl_main.hashCode();
    jl_main.isArray();
    jl_main.isBoolean();
    jl_main.isFalse();
    jl_main.isNull();
    jl_main.isNumber();
    jl_main.isString();
    jl_main.isTrue();
    JsonLiteral jl_test = new JsonLiteral("test");
    jl_main.equals(jl_test);

    // jsonparser
    jv_test_value = Json.parse("{\"n\":\"t\",\"t\":5}");
    jv_test_value = Json.parse("{\"\\n\":\"t\",\"t\":5}");
    jv_test_value = Json.parse("{\"t\":\"t\",\"t\":5}");
    jv_test_value = Json.parse("{\"\\f\":\"t\",\"t\":5}");
    jv_test_value = Json.parse("{\"\\n\":\"t\",\"t\":5}");
    jv_test_value = Json.parse("{\"\\r\":\"t\",\"t\":5}");
    jv_test_value = Json.parse("{\"\\t\":\"t\",\"t\":5}");
    jv_test_value = Json.parse("{\"\\b\":\"\",\"/\":5}");
    jv_test_value = Json.parse("{\"paramz\":{\"feeds\":[{\"id\":299076,\"oid\":288340,\"category\":\"article\",\"data\":{\"subject\":\"荔枝新闻3.0：不止是阅读\",\"summary\":\"江苏广电旗下资讯类手机应用“荔枝新闻”于近期推出全新升级换代的3.0版。\",\"cover\":\"/Attachs/Article/288340/3e8e2c397c70469f8845fad73aa38165_padmini.JPG\",\"pic\":\"\",\"format\":\"txt\",\"changed\":\"2015-09-22 16:01:41\"}}],\"PageIndex\":1,\"PageSize\":20,\"TotalCount\":53521,\"TotalPage\":2677}}");
    try {
  	jv_test_value = Json.parse("{\"\\\\\":\"\",\"\\u\":5,\"\\n\":\"\\t\"}");
    } catch (Exception e) {
      // TODO 自动生成的 catch 块

    }
    try {
      jv_test_value = Json.parse("\"n\":5,\"\\f\":5,\"\\n\":\"\\t\",\"f\":\"t\"}");
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
    try {
      jv_test_value = Json.parse("n\":5,\"\\f\":5,\"\\n\":\"\\t\",\"f\":\"t\"}");
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
    try {
      jv_test_value = Json.parse("t\":5,\"\\f\":5,\"\\n\":\"\\t\",\"f\":\"t\"}");
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
    try {
      jv_test_value = Json.parse("f\":5,\"\\f\":5,\"\\n\":\"\\t\",\"f\":\"\\t\"}");
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
    try {
      jv_test_value = Json.parse("null");
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
    try {
  	jv_test_value = Json.parse("9e+0");
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
    jv_test_value = Json.parse("9.5560");
    try {
      jv_test_value = Json.parse("9.a560");
    } catch (Exception e) {
      // TODO 自动生成的 catch 块

    }
    try {
      String str_null = null;
      jv_test_value = Json.parse(str_null);
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
    try {
      fr = null;
      jv_test_value = Json.parse(fr);
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
    try {
  	jo_main.asObject();
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
    jo_main.iterator().next();

    // 测试location残余函数
    Location l_main = new Location(1,1,1);
    Location l_test = new Location(1,1,2);
    Location l_test_null = null;
    l_main.equals(l_main);
    l_main.equals(l_test);
    l_main.equals(l_test_null);

    // 测试jsonvalue残余函数。
    JsonValue.valueOf(true);
    JsonValue.valueOf(flo_real);
    JsonValue.valueOf(lon_real);
    JsonValue.valueOf(iint_real);
    JsonValue.valueOf(str_real);
    JsonValue.valueOf(dou_real);
    jv_test_value.isTrue();
    jv_test_value.isArray();
    jv_test_value.isBoolean();
    jv_test_value.isFalse();
    jv_test_value.isNull();
    jv_test_value.isNumber();
    jv_test_value.isObject();
    jv_test_value.isString();
    try {
      jv_test_value.asObject();
    } catch (Exception e) {
      // TODO 自动生成的 catch 块

    }
    jv_test_value.writeTo(fw);
    try {
      jv_test_value.writeTo(fw,null);
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
      try {
      jv_test_value.writeTo(null,WriterConfig.MINIMAL);
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
    // jsonvalue类残余覆写函数测试
    jv_test_value = Json.parse("null");
    jv_test_value = Json.parse("true");
    jv_test_value = Json.parse("false");
    jv_test_value = Json.parse("null");


    // hashindextable
    JsonObject.HashIndexTable hashindextable = new HashIndexTable(new HashIndexTable());
    hashindextable.remove(0);
    hashindextable.remove(10);
    hashindextable.remove(-5);
    hashindextable.add("hash0",0);
    hashindextable.add("hash1",1);
    hashindextable.add("hash2",2);
    hashindextable.add("hash3",3);
    hashindextable.add("hash4",4);
    try {
		hashindextable.add(null,5);
	} catch (Exception e) {
		// TODO 自动生成的 catch 块
	}
    hashindextable.add("hash6",0);
    hashindextable.add("hash6",100000);

    // jo equal
    jo_main.equals(jo_main);
    jo_main.equals(null);
    jo_main.equals(jo2);
    m_main.equals(null);
    m_main.equals(m_main_test3);
    m_main.equals(m_main);
    m_main.equals(jo_main);
    try {
      jo_main.iterator().remove();
    } catch (Exception e) {
      // TODO 自动生成的 catch 块
    }
    try {
    JsonObject jo_main_null2 =new JsonObject(null);
  } catch (Exception e1) {
    // TODO 自动生成的 catch 块
  }
    JsonObject.unmodifiableObject(jo_main);
    try {
    JsonObject.unmodifiableObject(null);
  } catch (Exception e) {
    // TODO 自动生成的 catch 块
  }
  try {
	jo_main.set(null, jv_test_value);
} catch (Exception e) {
	// TODO 自动生成的 catch 块
}
  try {
	jo_main.set("name2", jv_test_null);
} catch (Exception e) {
	// TODO 自动生成的 catch 块
}
  jo_main.set("name3", jv_test_value);
  jo_main.merge(jo3);
  jo_main.merge(jo2);
  jo_main.merge(jo_main);
  try {
    jo_main.merge(null);
  } catch (Exception e) {
    // TODO 自动生成的 catch 块
  }
  jp_main.parse("{\"programmers\":[{\"firstName\":\"Brett\",\"lastName\":\"McLaughlin\",\"email\":\"aaaa\"},{\"firstName\":\"Jason\",\"lastName\":\"Hunter\",\"email\":\"bbbb\"},{\"firstName\":\"Elliotte\",\"lastName\":\"Harold\",\"email\":\"cccc\"}],\"authors\":[{\"firstName\":\"Isaac\",\"lastName\":\"Asimov\",\"genre\":\"science fiction\"},{\"firstName\":\"Tad\",\"lastName\":\"Williams\",\"genre\":\"fantasy\"},{\"firstName\":\"Frank\",\"lastName\":\"Peretti\",\"genre\":\"christian fiction\"}],\"musicians\":[{\"firstName\":\"Eric\",\"lastName\":\"Clapton\",\"instrument\":\"guitar\"},{\"firstName\":\"Sergei\",\"lastName\":\"Rachmaninoff\",\"instrument\":\"piano\"}]}");
  jp_main.parse("{\"HeWeather6\":[{\"basic\":{\"cid\":\"CN101010100\",\"location\":\"北京\",\"parent_city\":\"北京\",\"admin_area\":\"北京\",\"cnty\":\"中国\",\"lat\":\"39.90498734\",\"lon\":\"116.40528870\",\"tz\":\"8.0\"},\"daily_forecast\":[{\"cond_code_d\":\"103\",\"cond_code_n\":\"101\",\"cond_txt_d\":\"晴间多云\",\"cond_txt_n\":\"多云\",\"date\":\"2017-10-26\",\"hum\":\"57\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1020\",\"tmp_max\":\"16\",\"tmp_min\":\"8\",\"uv_index\":\"3\",\"vis\":\"16\",\"wind_deg\":\"0\",\"wind_dir\":\"无持续风向\",\"wind_sc\":\"微风\",\"wind_spd\":\"5\"},{\"cond_code_d\":\"101\",\"cond_code_n\":\"501\",\"cond_txt_d\":\"多云\",\"cond_txt_n\":\"雾\",\"date\":\"2017-10-27\",\"hum\":\"56\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1018\",\"tmp_max\":\"18\",\"tmp_min\":\"9\",\"uv_index\":\"3\",\"vis\":\"20\",\"wind_deg\":\"187\",\"wind_dir\":\"南风\",\"wind_sc\":\"微风\",\"wind_spd\":\"6\"},{\"cond_code_d\":\"101\",\"cond_code_n\":\"101\",\"cond_txt_d\":\"多云\",\"cond_txt_n\":\"多云\",\"date\":\"2017-10-28\",\"hum\":\"26\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1029\",\"tmp_max\":\"17\",\"tmp_min\":\"5\",\"uv_index\":\"2\",\"vis\":\"20\",\"wind_deg\":\"2\",\"wind_dir\":\"北风\",\"wind_sc\":\"3-4\",\"wind_spd\":\"19\"}],\"status\":\"ok\",\"update\":{\"loc\":\"2017-10-26 23:09\",\"utc\":\"2017-10-26 15:09\"}}]}");
  try {
    jp_main.parse("{\"HeWeather6\":[{\"basic\":{\"cid\":\"CN101010100\"\"location\":\"北京\",\"parent_city\":\"北京\",\"admin_area\":\"北京\",\"cnty\":\"中国\",\"lat\":\"39.90498734\",\"lon\":\"116.40528870\",\"tz\":\"8.0\"},\"daily_forecast\":[{\"cond_code_d\":\"103\",\"cond_code_n\":\"101\",\"cond_txt_d\":\"晴间多云\",\"cond_txt_n\":\"多云\",\"date\":\"2017-10-26\",\"hum\":\"57\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1020\",\"tmp_max\":\"16\",\"tmp_min\":\"8\",\"uv_index\":\"3\",\"vis\":\"16\",\"wind_deg\":\"0\",\"wind_dir\":\"无持续风向\",\"wind_sc\":\"微风\",\"wind_spd\":\"5\"},{\"cond_code_d\":\"101\",\"cond_code_n\":\"501\",\"cond_txt_d\":\"多云\",\"cond_txt_n\":\"雾\",\"date\":\"2017-10-27\",\"hum\":\"56\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1018\",\"tmp_max\":\"18\",\"tmp_min\":\"9\",\"uv_index\":\"3\",\"vis\":\"20\",\"wind_deg\":\"187\",\"wind_dir\":\"南风\",\"wind_sc\":\"微风\",\"wind_spd\":\"6\"},{\"cond_code_d\":\"101\",\"cond_code_n\":\"101\",\"cond_txt_d\":\"多云\",\"cond_txt_n\":\"多云\",\"date\":\"2017-10-28\",\"hum\":\"26\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1029\",\"tmp_max\":\"17\",\"tmp_min\":\"5\",\"uv_index\":\"2\",\"vis\":\"20\",\"wind_deg\":\"2\",\"wind_dir\":\"北风\",\"wind_sc\":\"3-4\",\"wind_spd\":\"19\"}],\"status\":\"ok\",\"update\":{\"loc\":\"2017-10-26 23:09\",\"utc\":\"2017-10-26 15:09\"}}]}");
  } catch (Exception e) {
    // TODO 自动生成的 catch 块
  }
  try {
    jp_main.parse("{HeWeather6\":[{\"basic\":{\"cid\":\"CN101010100\"\"location\":\"北京\",\"parent_city\":\"北京\",\"admin_area\":\"北京\",\"cnty\":\"中国\",\"lat\":\"39.90498734\",\"lon\":\"116.40528870\",\"tz\":\"8.0\"},\"daily_forecast\":[{\"cond_code_d\":\"103\",\"cond_code_n\":\"101\",\"cond_txt_d\":\"晴间多云\",\"cond_txt_n\":\"多云\",\"date\":\"2017-10-26\",\"hum\":\"57\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1020\",\"tmp_max\":\"16\",\"tmp_min\":\"8\",\"uv_index\":\"3\",\"vis\":\"16\",\"wind_deg\":\"0\",\"wind_dir\":\"无持续风向\",\"wind_sc\":\"微风\",\"wind_spd\":\"5\"},{\"cond_code_d\":\"101\",\"cond_code_n\":\"501\",\"cond_txt_d\":\"多云\",\"cond_txt_n\":\"雾\",\"date\":\"2017-10-27\",\"hum\":\"56\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1018\",\"tmp_max\":\"18\",\"tmp_min\":\"9\",\"uv_index\":\"3\",\"vis\":\"20\",\"wind_deg\":\"187\",\"wind_dir\":\"南风\",\"wind_sc\":\"微风\",\"wind_spd\":\"6\"},{\"cond_code_d\":\"101\",\"cond_code_n\":\"101\",\"cond_txt_d\":\"多云\",\"cond_txt_n\":\"多云\",\"date\":\"2017-10-28\",\"hum\":\"26\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1029\",\"tmp_max\":\"17\",\"tmp_min\":\"5\",\"uv_index\":\"2\",\"vis\":\"20\",\"wind_deg\":\"2\",\"wind_dir\":\"北风\",\"wind_sc\":\"3-4\",\"wind_spd\":\"19\"}],\"status\":\"ok\",\"update\":{\"loc\":\"2017-10-26 23:09\",\"utc\":\"2017-10-26 15:09\"}}]}");
  } catch (Exception e) {
    // TODO 自动生成的 catch 块
  }
  try {
    jp_main.parse("{\"a\":[{\"basic\":{\"cid\":\"CN101010100\"\"location\":\"北京\",\"parent_city\":\"北京\",\"admin_area\":\"北京\",\"cnty\":\"中国\",\"lat\":\"39.90498734\",\"lon\":\"116.40528870\",\"tz\":\"8.0\"},\"daily_forecast\":[{\"cond_code_d\":\"103\",\"cond_code_n\":\"101\",\"cond_txt_d\":\"晴间多云\",\"cond_txt_n\":\"多云\",\"date\":\"2017-10-26\",\"hum\":\"57\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1020\",\"tmp_max\":\"16\",\"tmp_min\":\"8\",\"uv_index\":\"3\",\"vis\":\"16\",\"wind_deg\":\"0\",\"wind_dir\":\"无持续风向\",\"wind_sc\":\"微风\",\"wind_spd\":\"5\"},{\"cond_code_d\":\"101\",\"cond_code_n\":\"501\",\"cond_txt_d\":\"多云\",\"cond_txt_n\":\"雾\",\"date\":\"2017-10-27\",\"hum\":\"56\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1018\",\"tmp_max\":\"18\",\"tmp_min\":\"9\",\"uv_index\":\"3\",\"vis\":\"20\",\"wind_deg\":\"187\",\"wind_dir\":\"南风\",\"wind_sc\":\"微风\",\"wind_spd\":\"6\"},{\"cond_code_d\":\"101\",\"cond_code_n\":\"101\",\"cond_txt_d\":\"多云\",\"cond_txt_n\":\"多云\",\"date\":\"2017-10-28\",\"hum\":\"26\",\"pcpn\":\"0.0\",\"pop\":\"0\",\"pres\":\"1029\",\"tmp_max\":\"17\",\"tmp_min\":\"5\",\"uv_index\":\"2\",\"vis\":\"20\",\"wind_deg\":\"2\",\"wind_dir\":\"北风\",\"wind_sc\":\"3-4\",\"wind_spd\":\"19\"}],\"status\":\"ok\",\"update\":{\"loc\":\"2017-10-26 23:09\",\"utc\":\"2017-10-26 15:09\"}}]}");
  } catch (Exception e) {
    // TODO 自动生成的 catch 块
  }
  try {
    jp_main.parse("u1005");
  } catch (Exception e) {
  }
    try {
    jp_main.parse("u11111111520");
  } catch (Exception e) {
  }
  try {
    jp_main.parse("\"u1000");
  } catch (Exception e) {
  }
  jp_main.parse("{\"\\u1000666\":5}");
  jp_main.parse("{\"\\u1000\":5}");
  try {
	jp_main.parse("9a");
} catch (Exception e) {
}
try {
	jp_main.parse("{\"a\":[]");
} catch (Exception e) {
}
try {
	jp_main.parse("{\"a\":[]\"basic\":5},{\"dsfsdf\":6}]");
} catch (Exception e) {
}
try {
    jp_main.parse("{\"a\":[{}\"basic\":5},{\"dsfsdf\":6}]");
  } catch (Exception e) {
  }
  try {
    char a = '\n';
    jp_main.parse(a+"dd");
  } catch (Exception e) {
  }
  try {
    String str_null = null;
    jp_main.parse(str_null);
  } catch (Exception e) {
  }
  try {
    jp_main.parse("9e-a");
  } catch (Exception e) {
  }
  try {
    ja_main_add.iterator().remove();
  } catch (Exception e) {
  }
  ja_main_add.equals(null);
  ja_main_add.equals(ja_main_add);
  ja_main_set.add(66);
  ja_main_add.equals(ja_main_set);
  ja_main_add.equals(jv_test_valueof);
  ja_main_add.equals(ja_ja);

  WritingBuffer wb_main = new WritingBuffer(fw);  
  char[] charArray2 = new char[]{'a', 'b', 'c', 'd', 'e', 'f','g', 'h', 'i', 'j', 'k', 'a','a', 'b', 'c', 'd', 'e', 'f','g', 'h', 'i', 'j', 'k', 'a'};
  try {
    wb_main.write(charArray2,1,300);
  } catch (Exception e) {
  }
  wb_main.write(charArray2,1,20);
  wb_main.write(charArray2,1,10);
  wb_main.write(charArray2,1,5);
  wb_main.write(charArray2,1,13);
  wb_main.close();

  WritingBuffer wb_main_str = new WritingBuffer(fw); 
  wb_main_str.write("charArray",1,5);
  wb_main_str.write("charArraysdfjhgslkdjfghlkdsfjgkljdsfhgjkdsflhgkljsdf",1,30);
  //补全json类中array
  String str_null = null;
  jv_test_array_string = Json.array(str_null);
  jv_test_array_string = Json.array();
  FileReader fr_null = null;
  try {
	jp_main.parse(fr_null,5);
} catch (Exception e) {
}








}

}
